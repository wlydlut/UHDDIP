#python -m torch.distributed.launch --nproc_per_node=2 --master_port=4321 basicsr/train.py -opt src/Options/train_UHDDIP.yml  --launcher pytorch
name: UHDDIP_UHDSnow #UHDDIP_UHDRain UHDDIP_UHDHaze
model_type: UHDModel
scale: 1
num_gpu: 2 # set num_gpu: 0 for cpu mode
manual_seed: 0

# dataset and data loader settings
datasets:
  train:
    name: General_Image_Train
    type: Dataset_PairedImage
    ######################################
    dataroot_gt: /data/wangliyan/dataset/UHD/UHD_Snow/training_set/gt
    dataroot_lq: /data/wangliyan/dataset/UHD/UHD_Snow/training_set/input
    dataroot_normal: /data/wangliyan/dataset/UHD/UHD_Snow/training_set/normal
    io_backend:
      type: disk

    gt_size: 512
    use_resize_crop: False
    use_flip: False
    use_rot: False

    # data loader
    use_shuffle: true
    geometric_augs: True
    batch_size_per_gpu: 6
    num_worker_per_gpu: 8
    dataset_enlarge_ratio: 1

  val:
    name: General_Image_Valid
    type: Dataset_PairedImage
    dataroot_gt: /data/wangliyan/dataset/UHD/UHD_Snow/val/gt
    dataroot_lq: /data/wangliyan/dataset/UHD/UHD_Snow/val/input
    dataroot_normal: /data/wangliyan/dataset/UHD/UHD_Snow/val/normal

    gt_size: 512
    io_backend:
      type: disk
    geometric_augs: True
    use_resize_crop: False
    use_flip: False
    use_rot: False

# network structures
network_g:
  type: UHDDIP
  scale_factor: 8
  num_blocks: 4

  bias: True
  LayerNorm_type: 'WithBias'

path:
  pretrain_network_g: ~
  strict_load: true
  resume_state: ~

# training settings
train:
  optim_g:
    type: AdamW
    lr: !!float 5e-4
    weight_decay: !!float 1e-3
    betas: [0.9, 0.99]

  scheduler:
    type: CosineAnnealingRestartCyclicLR
    periods: [ 1000, 500000 ]   # UHDSnow/UHDRain/UHDHaze:500000
    restart_weights: [ 1, 1 ]
    eta_mins: [ 0.0005, 0.0000001 ]

  total_iter: 500000
  warmup_iter: -1  # no warm up

   #losses
  pixel_opt:
    type: L1Loss #
    loss_weight: 1.0
    reduction: mean

  fft_opt:
    type: FFTLoss
    loss_weight: !!float 0.1

# validation settings
val:
  val_freq: !!float 1000
  save_img: true

  key_metric: ssim
  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      test_y_channel: true
    ssim:
      type: calculate_ssim
      crop_border: 4
      test_y_channel: true

# logging settings
logger:
  print_freq: 1000
  save_checkpoint_freq: !!float 1000
  use_tb_logger: true


dist_params:
  backend: nccl
  port: 16500

